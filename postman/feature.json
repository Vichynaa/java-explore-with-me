{
  "info": {
    "_postman_id": "13243e57-8b4a-40bc-a42e-69a8c3bc421b",
    "name": "Comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26312129"
  },
  "item": [
    {
      "name": "initialization",
      "item": [
        {
          "name": "Add user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function() {\r",
                  "    pm.expect(pm.response.code).to.equal(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response have body\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "const response = pm.response.json();\r",
                  "pm.collectionVariables.set('userId', response.id);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"ivan.petrov@practicummail.ru\",\r\n  \"name\": \"Иван Петров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/admin/users",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function() {\r",
                  "    pm.expect(pm.response.code).to.equal(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response have body\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "const response = pm.response.json();\r",
                  "pm.collectionVariables.set('categoryId', response.id);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"Музеи + концерты\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/admin/categories",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function() {\r",
                  "    pm.expect(pm.response.code).to.equal(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response have body\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "const response = pm.response.json();\r",
                  "pm.collectionVariables.set('eventId', response.id);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\r\n  \"category\": {{categoryId}},\r\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/users/{{userId}}/events",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "{{userId}}",
                "events"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "tests",
      "item": [
        {
          "name": "Add comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('requestBody', JSON.stringify(pm.request.body));\r",
                  "\r",
                  "pm.test(\"Status code is 201\", function() {\r",
                  "    pm.expect(pm.response.code).to.equal(201);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response have body\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.collectionVariables.get('requestBody'));\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Комментарий должен содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('author');\r",
                  "pm.expect(target).to.have.property('event');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(source.text).equal(JSON.stringify(target).text, 'text комментария должен соответствовать искомому');\r",
                  "});\r",
                  "const response = pm.response.json();\r",
                  "pm.collectionVariables.set('commentId', response.id);"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"text\": \"Супер!\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/users/{{userId}}/events/{{eventId}}/comments",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "{{userId}}",
                "events",
                "{{eventId}}",
                "comments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add comment with invalida data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 500]);\r",
                  "});\r",
                  "pm.test(\"Response have body\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"text\": \" \"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/users/{{userId}}/events/{{eventId}}/comments",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "{{userId}}",
                "events",
                "{{eventId}}",
                "comments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('requestBody', JSON.stringify(pm.request.body));\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function() {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response have body\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.collectionVariables.get('requestBody'));\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Комментарий должен содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('author');\r",
                  "pm.expect(target).to.have.property('event');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(source.text).equal(JSON.stringify(target).text, 'text комментария должен соответствовать искомому');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"text\": \"Новый текст\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/users/{{userId}}/comments/{{commentId}}",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "{{userId}}",
                "comments",
                "{{commentId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Event with comment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response have body\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны содержать комментарии, которые были к ним добавлены\", function () {\r",
                  "    pm.expect(response).to.have.property(\"comments\");\r",
                  "    const firstComment = response.comments[0]\r",
                  "    pm.expect(firstComment).to.have.property('id', pm.environment.get(\"userId\"));\r",
                  "    pm.expect(firstComment).to.have.property('text', \"Новый текст\");\r",
                  "    pm.expect(firstComment).to.have.property('author', \"Иван Петров\");\r",
                  "    pm.expect(firstComment).to.have.property('event', pm.environment.get(\"eventId\"));\r",
                  "    pm.expect(firstComment).to.have.property('created');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/{{userId}}/events/{{eventId}}",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "{{userId}}",
                "events",
                "{{eventId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete comment",
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/users/{{userId}}/comments/{{commentId}}",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "{{userId}}",
                "comments",
                "{{commentId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete comment check",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response have body\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "\r",
                  "pm.test(\"Данные в ответе не должны содержать удаленный комментарий\", function () {\r",
                  "    pm.expect(response).to.have.property(\"comments\");\r",
                  "    const firstComment = response.comments[0]\r",
                  "    pm.expect(firstComment).eq(undefined)\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "localhost:8080/users/{{userId}}/events/{{eventId}}",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "{{userId}}",
                "events",
                "{{eventId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 404\", function () {\r",
                  "  pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "localhost:8080/users/{{userId}}/comments/{{commentId}}",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "{{userId}}",
                "comments",
                "{{commentId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Delete all test data",
      "item": [
        {
          "name": "Delete category",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "localhost:8080/admin/categories/{{categoryId}}",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "categories",
                "{{categoryId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete user",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "localhost:8080/admin/users/{{userId}}",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "users",
                "{{userId}}"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "requestBody",
      "value": ""
    },
    {
      "key": "userId",
      "value": ""
    },
    {
      "key": "eventId",
      "value": ""
    },
    {
      "key": "categoryId",
      "value": ""
    },
    {
      "key": "commentId",
      "value": ""
    }
  ]
}